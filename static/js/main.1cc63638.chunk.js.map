{"version":3,"sources":["components/App/App.js","index.js"],"names":["Page","styled","div","MessageTitle","h1","MessageFrom","form","MessageUsernameInput","input","MessageTextArea","textarea","MessageSubmitButton","MessageWrapper","Message","MessageBody","MessageAvatar","MessageUserInfo","MessageNickname","span","MessageUsername","MessageInfo","MessageDate","MessageContent","p","ErrorMessage","Loading","MessageList","username","timestamp","content","propTypes","PropTypes","string","node","App","useState","messages","setMessages","MessageApiErr","setMessageApiErr","value","setValue","setUsername","createMessageErr","setCreateMessageErr","isLoading","setIsLoading","handleInputFocus","e","fetchMessages","fetch","then","res","json","data","catch","err","message","useEffect","onSubmit","preventDefault","method","headers","body","JSON","stringify","nickname","ok","onChange","target","onFocus","rows","type","toString","length","map","Date","createdAt","toLocaleString","id","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.1cc63638.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst apiUrl = 'https://student-json-api.lidemy.me/comments?_sort=createdAt&_order=desc'\nconst Page = styled.div`\n  margin: 2% auto;\n  max-width: 650px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`\nconst MessageTitle = styled.h1`\n  align-self: center;\n`\n\n\nconst MessageFrom = styled.form`\n  padding: 20px 20px;\n  background: white;\n  width: 100%;\n  box-shadow: 1px 1px 5px #e8e8e8;\n  border-radius: 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 30px;\n`\nconst MessageUsernameInput = styled.input`\n  border: 1px solid #c2dffb;\n  box-sizing: border-box; \n  border-radius: 5px;\n  background: lightgrey;\n  margin-bottom: 2em;\n  height:2em;\n  :focus {\n    outline-style: none;\n    background: white;\n  }\n`\nconst MessageTextArea = styled.textarea`\n  width: 100%; \n  min-height: 10em;\n  padding: 10px;\n  border: 1px solid #c2dffb;\n  box-sizing: border-box; \n  border-radius: 5px;\n  background: lightgrey;\n  :focus{\n    outline-style: none;\n    background: white;\n  }\n`\n\nconst MessageSubmitButton = styled.input`\n  padding: 10px 30px;\n  border: 1px solid #c2dffb;\n  background: white;\n  width: 100%;\n  border-radius: 5px;\n  color: black;\n  font-size: 16px;\n  transition: all 0.3s;\n  text-decoration: none;\n  margin-top: 2em;\n  :hover {\n    background: #c2dffb;\n    cursor: pointer;\n  }\n`\nconst MessageWrapper = styled.div``\nconst Message = styled.div`\n  position: relative;\n  background: white;\n  width: 100%;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 1px 1px 3px #e8e8e8;\n  border-radius: 15px;\n  min-height: 70px;\n  display: flex;\n  padding: 15px 15px;\n  word-break: break-all;\n  //justify-content: space-between;\n`\n// const MessageCard = styled.div`\n//   display: flex;\n// `\nconst MessageBody = styled.div`\n  margin-left: 20px;\n  overflow-wrap: anywhere;\n  max-width: 500px;\n`\n\nconst MessageAvatar = styled.div`\n  min-width: 50px;\n  height: 50px;\n  width: 50px;\n  border-radius: 50%;\n  background: #e4f0fb;\n`\nconst MessageUserInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  max-width: 250px;\n`\nconst MessageNickname = styled.span`\n  color: black;\n  font-weight: bold;\n  overflow: hidden;\n`\n\nconst MessageUsername  = styled.span`\n  color: #a0a0a0;\n`\nconst MessageInfo = styled.div`\n  display: flex;\n  width: 100%;\n`\n\nconst MessageDate = styled.span`\n  color: #a0a0a0;\n  margin-left: 20px;\n  line-height: 3;\n`\n\nconst MessageContent = styled.p`\n  margin-top: 20px;\n  max-width: 100%;\n  white-space: break-spaces;\n`\n\n// const MessageDelete = styled.div`\n  \n//   display: flex;\n//   align-self: right;\n//   margin-right: 2em;\n//   color: grey;\n//   font-size: 1em;\n// `\n\nconst ErrorMessage = styled.div`\n  margin: 2em;\n  color: red;\n`\nconst Loading = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background: rgba(0,0,0,0.5);\n  color: white;\n  display: flex;\n  align-item: center;\n  justify-content: center;\n`\n\nfunction MessageList({\n  username, timestamp, content, \n  //handleDelete\n}) {\n  // const handleDeleteMessage = () =>(\n  //   handleDelete\n  // )\n  return(\n    <Message> \n      {/* <MessageCard> */}\n        <MessageAvatar>\n        </MessageAvatar>\n        <MessageBody>  \n          <MessageInfo> \n            <MessageUserInfo>\n              <MessageNickname>\n                {username}\n              </MessageNickname>\n              <MessageUsername>\n                {username}\n              </MessageUsername>\n            </MessageUserInfo>\n            <MessageDate>\n              {timestamp}\n            </MessageDate>\n          </MessageInfo>\n          <MessageContent>\n            {content}\n          </MessageContent>\n        </MessageBody>\n      {/* </MessageCard> */}\n      {/* <MessageDelete onClick={handleDeleteMessage} >X</MessageDelete> */}\n    </Message>\n  )\n}\n\nMessage.propTypes = {\n  username: PropTypes.string,\n  timestamp: PropTypes.string,\n  content: PropTypes.node\n}\nfunction App() {\n  const [messages, setMessages] = useState(null)\n  const [MessageApiErr, setMessageApiErr] = useState(null)\n  const [value, setValue] = useState();\n  const [username, setUsername] = useState();\n  const [createMessageErr, setCreateMessageErr] = useState(null)\n  // avoid the unlimited submit\n  const [isLoading, setIsLoading] = useState(false)\n  \n\n  // comment value\n  const handleTextAreaChange = e => {\n    setValue(e.target.value)\n  }\n\n  // username value\n  const handleUsernameChange = e => {\n    setUsername(e.target.value)\n  }\n\n  const handleInputFocus = (e) => {\n    setCreateMessageErr(null)\n  }\n\n  // const handleDelete = () => {\n  //   alert('s')\n    // fetch('https://student-json-api.lidemy.me/comments', {\n    //   method: 'DELETE',\n    //   headers: {\n    //     'content-type': 'application/json'\n    //   },\n    //   body: JSON.stringify({\n    //     nickname: username,\n    //     body: value\n    //   })\n    // })\n    // .then(res => res.json())\n    // .then(data => {\n    //   setIsLoading(false)\n    //   if(!data.ok) {\n    //     setCreateMessageErr(data.message)\n    //   }\n    //   fetchMessages()\n    // }).catch(err => {\n    //   setIsLoading(false)\n    // })\n  //}\n  \n\n\n  // fetch message api\n  const fetchMessages = () => {\n    return fetch(apiUrl)\n    .then(res=>res.json())\n    .then((data)=>{\n      setMessages(data)\n    })\n    .catch(err=>{\n      setMessageApiErr(err.message)\n    })\n  }\n\n  // send new comment submit\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    if (isLoading) {\n      return\n    }\n    setIsLoading(true)\n    fetch('https://student-json-api.lidemy.me/comments', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        nickname: username,\n        body: value\n      })\n    })\n    .then(res => res.json())\n    .then(data => {\n      setIsLoading(false)\n      if(!data.ok) {\n        setCreateMessageErr(data.message)\n      }\n      setValue('')\n      setUsername('')\n      fetchMessages()\n    }).catch(err => {\n      setIsLoading(false)\n    })\n  }\n  useEffect(()=>{\n    fetchMessages()\n  },[])\n  return (\n    <Page>\n      {\n        isLoading && <Loading><h1>Loading...</h1></Loading>\n      }\n      <MessageTitle>留言板</MessageTitle>\n      <MessageFrom  onSubmit={handleFormSubmit}>\n        Enter Your Name: <br />\n        <MessageUsernameInput \n        value={username} \n        onChange={handleUsernameChange} \n        onFocus={handleInputFocus} />\n        <br />\n        Enter Your Comment: <br />\n        <MessageTextArea\n        value={value}\n        onChange={handleTextAreaChange}\n        onFocus={handleInputFocus}\n        rows=\"10\" />\n        {createMessageErr && <ErrorMessage>Your username or comment is empty!</ErrorMessage>}\n        <MessageSubmitButton type=\"submit\"/>\n      </MessageFrom>\n      {MessageApiErr  && (\n      <ErrorMessage>\n        Something went wrong.<br />\n        {MessageApiErr.toString()}\n      </ErrorMessage>)}\n      {messages && messages.length === 0 && <h1>目前沒有留言，快來新增吧！</h1>}\n      <MessageWrapper>\n        {\n          messages && messages.map(message => (\n            <MessageList \n            key={message.id} \n            username={message.nickname} \n            timestamp={new Date(message.createdAt).toLocaleString()} \n            content={message.body}\n            >\n            </MessageList>\n          ))\n        }\n      </MessageWrapper>\n      \n    </Page>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\nimport {createGlobalStyle} from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  background: #f7f7f7;\n  margin: 0;\n  margin-bottom: 120px;\n}\n* {\n  box-sizing: border-box;\n}\n`\nReactDOM.render(\n  <React.Fragment>\n      <App />\n      <GlobalStyle />\n    </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}